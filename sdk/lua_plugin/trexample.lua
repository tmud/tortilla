-- trexample - название плагина.
-- Своему плагину нужно дать другое имя (любое), которое 
-- еще не используется другим плагином.
-- Для этого нужно заменить trexam на свое имя, а 
-- также заменить имя файла плагина.

local trexample = {}

-- название плагина
function trexample.name()
  return 'Пример использования trprompt.'
end

-- многострочное описание плагина
function trexample.description()
  local d = {
    'Пример плагина с модулем trprompt.',
    'Отбор строк от ключевой строки до промпт-строки.'
  }
  return table.concat(d, '\r\n')
end

-- версия плагина
function trexample.version()
  return '-'
end

-- функция-фильтр для триггера до промпт-строки
-- она отвечает за отбор только нужных строк.
-- Она также она умеет дропать строчки, если их не нужно 
-- показывать в клиенте.
-- В качестве параметра - объект типа viewstring (см. sdk help.html#viewstring)

-- Функция должна вернуть 2 булевских значения - результата
-- 1 результат - false - строку не сохранять в триггере, true - строку сохранить/запомнить.
-- 2 результат - false - строку оставить в исходном окне, true - удалить (дропнуть) из исходного окна.

local function filter(vs)
  local text = vs:getText()   -- получам текст строки (см. sdk)
  if text == 'abc' then       -- какое то условие, можно использовать регулярки с помощью pcre, createPcre (см. sdk).
    return true, false        -- строку записать в триггер (прошла фильтр), дропать строку не нужно
  end
  return false, false         -- строка не подходит, ничего не делаем (не сохраняем в триггер, не дропаем)
end

-- функция фильтр - проверяет, подходит ли данная строка под промпт-строку или нет.
-- Иногда нужно пропускать строчки листания страниц, например, которые тоже могут быть промпт-строками.
-- Параметр - обычная строка типа string
-- Данную функцию писать не обязательно, если нет надобности.
local function skip_prompt(s)
  if s:find('Для выбора другой страницы') then return true end  -- строка с признаком промпт строки, но это не тот промпт
  return false
end

-- переменная будет триггером из модуля
local t

-- метод инициализации плагина
function trexample.init()
  -- создаем триггер с помощью модуля trprompt
  -- первый параметр - ключевая строка, причем это регулярное выражение PCRE! В клиенте есть калькулятор PCRE, где можно проверять их.
  -- второй параметр - функция фильтр, она должна быть определена выше этой строки.
  -- третий параметр - функция фильтр промпт-строки. писать ее не обязательно (можно указать 2 параметра).
  t = prompt_trigger('^:.*', filter, skip_prompt)
end

-- вызывается при дисконнекте
function trexample.disconnect()
  -- при обрыве нужно обязательно сбросить триггер
  if t then t:disconnect() end 
end

-- вызывается при игре, сюда попадают все строки мада, до обработки в триггерах, сабах и прочем.
function trexample.before(v, vd)
  -- работаем только с главным (0) окном мада
  if v ~= 0 then return t end

  -- отбор данных в триггер, будет вызывается функция filter
  if t and t:check(vd) then
    -- триггер сработал, т.к. пришел промпт
    -- получаем массив viewstring строк, уже отфильтрованных 
    local strings = t.strings
    -- чтото делаем
  end
end

-- возвращаем плагин-объект в клиент
return trexample
