------------------------------------------------------------------------------------------------------------
Модули, которые подключаются в Lua и встроены непосредственно в клиент:
При необходимости их можно заменить и другими (через загрузку нового модуля с этим же именем), 
но необходимость врядли возникнет.
------------------------------------------------------------------------------------------------------------
system - модуль системных методов:
void system.sleep(number ms) - засыпание потока на заданное количество мс.
void system.dbglog(string [,number|string|boolean)) - Выводит лог-информацию в отладчик посредством OutputDebugString.
int  system.msgbox([string caption,] string text [,string buttons_and_icons] ) - Отображение системного мессадж бокса.
Кнопки: 
- ok,cancel - по умолчанию ok (первая кнопка)
- cancel,ok 
- yes,no
- no,yes
Иконки: error,stop,info,information,warning,question

table system.loadTextFile(filepath) - загружает текстовый файл в таблицу отдельными строками. 
Индексы строк начинаютя от 1. Возвращает nul, если файл прочитать не удалось. Непечатаемые символы с кодом до 32
(кроме \r\n) заменяются на пробелы.

bool system.appendStringToFile(filepath, file) - добавляет в конец файла текстовую строку данные из 2 параметра.
void system.deleteFile(filepath) - удаляет файл.
string system.convertFromWin(string) - конвертация строки из win-кодировки(ansi) в utf8-кодировку.
string system.convertToWin(string) - конвертация из utf8-кодировки в win-кодировку.
void system.beep(int freq, int duration) - проигрывание звука заданной частоты и длительности.
seconds, minutes, hour = system.getTime() - возвращает текущее время.
day, month, year = system.getDate() - возвращает текущую дату.
int system.getTicks() - число миллисекунд прошедшее с момента включения компьютера.
------------------------------------------------------------------------------------------------------------
rnd - генератор случайных чисел и строк
void rnd.seed(uint seed) - сброс ключа генератора на другое значение.
int  rnd.rand(int min, int max) - генерация случайного числа в рамках min,max включительно.
uint rnd.uint() - генерация случайного целого беззнакового числа.
float rnd.float() - генерация случайного веществественного числа [0 <= rnd < 1]
string rnd.string([int min], int max) - генерация случайной строки длиной от 0(min) до max символов.
------------------------------------------------------------------------------------------------------------
extra - модуль для работы с падежами предметов и базой предметов.
extra.declension() - Сохраняет словарь слов/словосочетаний в именительном падеже. Они добавляются программно.
Далее ищет именительный падеж по другим падежам. Если именительный падеж найден то возвращает его.
По сути данная библиотека - с автообучением.
Также умеет сравнивать строки без учета падежей. Механизм сравненения не протестирован до конца, но работает пока.
Рассчитана на работу с именами предметов и объектов чтобы их использовать в какой либо базе.

нужно сначала создать экземпляр словаря:
local d = extra.declension()
методы:
bool  d:add(string) - добавление строки в словарь. Обязательно в именительном падеже.
table d:similar(string) - ищет строки в именительном падеже по исходной строке (в другом падеже, без окончания), nil - если не найдены
table d:find(string) - ищет строки в именительном падеже по строгому совпадению исходной строки, nil - если не найдены
bool  d:load(filepath) - загрузка базы из файла
bool  d:save(filepath) - запись базы в файл
void  d:clear() - очистка базы
bool  d:compare(string1, string2) - сравнение двух строк на совпадение без падежей. с базой не работает
bool  d:check(string, int index) - проверка что по данному индексу находится нужная строка. используется для юнит-тестов
bool  d:remove(string) - удаление из базы фразы. Удаление происходит только если есть единственное совпадение! 
Т.е. нужно указывать полную строку (в именительном падеже конечно же).
------------------------------------------------------
Работа со словарем.
local d = extra.dictonary(string path) - Создает словарь. Позволяет добавлять чтото по имени и потом искать по имени, в том
числе сокращенному. нужно указать каталог, где будут храниться файлы БД словаря.

методы
bool[, string] d:add(string name, string data, [table tegs]) - добавляет в словарь данные по имени. Можно указать дополнительно
список автотегов (необязательно). Эти автотеги - постоянные, которые изменяются только через ретегирование (пересоздание базы).
Возвращает результат операции, и текст ошибки, в случае, что операция не прошла.

table d:find(string name) - ищет в словаре по имени (в т.ч. сокращенному) или автотегам или тегам игрока. Части составного
названия задаются через пробел. Возвращает блок данных - таблица (если чтото найдено).
table = { [name] = {data = string (данные), auto - {}  (автотеги), tegs = {} (теги пользователя) } }

bool,string update( tegs function(data) ) - пересчет тегов всех объектов в базе. Нужно указать функцию, которая отвечает за анализ data 
и выборку тегов для объекта из бинарных данных. Эта операция называется ретегирование.

bool delete(string name) - удаляет из словаря предмет. Перезапись файлов (без удаленных данных) с базой происходит при закрытии базы.

string teg(string name, string newteg) - добавление, удаление индивидуальных тегов для объектов. Возможные результаты - 
added - тег добавлен, removed - тег удален, exist - есть такой же автотег, absent - объекта нет в базе.
Это дополнительные теги. Они используются для индивидуальных тегов самого игрока. Они не пересчитываются при ретегировании.

d:wipe() - удаляет всю базу словаря со всеми файлами! Осторожно! эта функция предназначена для автотестов библиотеки!

d:comment(string name, string text) - добавляет комментарий к предмету по имени

------------------------------------------------------------------------------------------------------------
Модули в отдельных файлах:
------------------------------------------------------------------------------------------------------------
lbass - модуль луа-обвязки звукового движка bass
bool init() - инициализация. Нужно вызвать один раз, после загрузки, перед первым использованием.
void free() - выгрузка bass. Освобождение всех ресурсов. Нужно вызвать при завершении работы.
int loadSample(file) - загрузка файла целиком в память компьютера как звукового сэмпла. Предназначен для звуковых
эффектов. Возвращает идентификатор, с помощью которого дальше происходит работа с этим сэмплом.
int loadStream(file) - загрузка файла как стрим-файла (поток). Этот файл будет во время проигрывания подкачиваться с диска
компьютера по мере надобности. Рассчитан на воспроизведение фоновой музыки. Возвращает идентификатор для дальнейшей 
работы со этим звуком.
bool unload(int id) - выгрузка из памяти компьютера звукового файла и все информацией, связанной с ним. Нужно передать 
идентификатор.
bool isHandle(int id) - проверка, что есть такой звук, с заданным идентификатором.
bool isSample(int id) - проверка по идентификатору - звуковой сэмпл это или поток.
bool play(int id[, int volume [, function endplaying]]) - воспроизводит звук. Нужно указать идентификатор и громкость.
Громкость изменряется в процентах от 0 до 100 (это индивидуальная для данного звука громкость). 
Можно указать луа-функцию, которая будет вызвана, если звук завершил проигрыш, но это работает только для поточных звуков.
bool isPlaying(int id) - проверка - звучит в данный момент звук или нет. Нужно передать идентификатор.
string getPath(int id) - возвращает путь к файлу по идентификатору.
bool stop(int id) - остановливает воспроизведение звука.
void stopAll() - останавливает воспроизведение всех звуков.
void setVolume(int v) - задает мастер-громкость всех звуков. Для каждого звука может быть задана своя громкость.
int  getVolume() - возвращает текущую мастер-громкость.
void setRecord(string param, int value) - задает параметры для записи звука с микрофона. 
Варианты freq - частота, channels - колво каналов.
bool canRecord() - проверяет, что запись возможна (проверяет наличие микрофона на компьютере).
bool startRecord(string file) - запускат запись звука с микрофона в заданный файл. Запись идет в формате wav.
bool stopRecord() - останавливает запись звука.
------------------------------------------------------------------------------------------------------------
soundplayer - модуль для воспроизведения звуковых эффектов и музыки. Использует модуль lbass.
Рекомендуется использовать данный модуль, а на lbass напрямую.
setVolume(int v) - устанавливает мастер-громкость.
int getVolume() - возвращает текущую мастер-громкость.
int playfx(string file [, int volume]) - проигрывает звуковой эффект сэмпл из файла с нужной громкостью. 
Возвращает идентификатор сэмпла. Предназначен для звуковых эффектов.
int play(string file [, int volume]) - проигрывает мелодию из файла с нужной громкостью. Возвращает 
идентификатор. Предназначен для воспроизведения фоновой музыки. Может проигрываться только один музыкальный файл.
int playlist(table t[, int volume]) - проигрывает плейлист (список звуковых файлов) по кругу как музыкальные файлы.
void stop(int id) - останавливает проигрыш звука. Нужно указать идентификатор звукового файла.
void stopAll() - останавливает проигрыш всех звуковых файлов.
bool startRecord(string file) - запускат запись звука с микрофона в заданный файл. Запись идет в формате wav.
void stopRecord() - останавливает запись звука.
------------------------------------------------------------------------------------------------------------
lvoice(voice.dll) - модуль для воспроизведения речи через программный интерфейс SAPI5.
init() - инициализация
release() - выгрузка модуля, освобождение ресурсов
bool speak(string) - прочитать текст
void stop() - остановить чтение текста
int getVolume() - текущая громкость
bool setVolume(int) - задать громкость [0,100]
int getRate() - текущий темп речи
bool setRate(int) - задать темп речи [-10,10]
table getVoices() - таблица с установленными голосами на компьютере
bool selectVoice(int) - выбрать текущий голос
------------------------------------------------------
